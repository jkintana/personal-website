<!-- ---
// GoogleSheetData.astro
import type { ParseResult } from 'papaparse';
import { parse } from 'papaparse';

// Define interfaces for our data structure
interface Props {
  sheetUrl: string;
}

// Generic type for the sheet data
interface SheetRow {
  [key: string]: string | number | boolean | null;
}

const { sheetUrl } = Astro.props;

// Fetch data at build time
let data: SheetRow[] = [];
let error: string | null = null;

try {
  const response = await fetch(sheetUrl);
  if (!response.ok) {
    throw new Error('Failed to fetch data');
  }
  const csvText = await response.text();
  const parsedData: ParseResult<SheetRow> = parse(csvText, { 
    header: true,
    dynamicTyping: true // Automatically convert numbers and booleans
  });
  
  if (parsedData.errors.length > 0) {
    throw new Error(`Parse error: ${parsedData.errors[0].message}`);
  }
  
  data = parsedData.data;
} catch (err) {
  error = err instanceof Error ? err.message : 'An unknown error occurred';
}
---

<div>
  {error && <div class="text-red-500">Error: {error}</div>}
  
  {!error && data.length > 0 && (
    <table class="min-w-full divide-y divide-gray-200">
      <thead class="bg-gray-50">
        <tr>
          {Object.keys(data[0]).map((header) => (
            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              {header}
            </th>
          ))}
        </tr>
      </thead>
      <tbody class="bg-white divide-y divide-gray-200">
        {data.map((row) => (
          <tr>
            {Object.values(row).map((cell) => (
              <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                {cell?.toString() ?? ''}
              </td>
            ))}
          </tr>
        ))}
      </tbody>
    </table>
  )}

  <script define:vars={{ sheetUrl }}>
    // Client-side refresh logic
    function refreshData() {
      fetch(sheetUrl)
        .then(response => response.text())
        .then(csvText => {
          const parsedData = Papa.parse(csvText, { 
            header: true,
            dynamicTyping: true 
          });
          
          if (parsedData.errors.length === 0 && parsedData.data.length > 0) {
            updateTable(parsedData.data);
          } else {
            console.error('Parse error:', parsedData.errors);
          }
        })
        .catch(error => console.error('Error refreshing data:', error));
    }

    function updateTable(newData) {
      const table = document.querySelector('table');
      if (!table || !newData.length) return;

      const tbody = table.querySelector('tbody');
      if (!tbody) return;

      tbody.innerHTML = '';

      newData.forEach(row => {
        const tr = document.createElement('tr');
        Object.values(row).forEach(cell => {
          const td = document.createElement('td');
          td.className = 'px-6 py-4 whitespace-nowrap text-sm text-gray-500';
          td.textContent = cell?.toString() ?? '';
          tr.appendChild(td);
        });
        tbody.appendChild(tr);
      });
    }

    // Refresh data every 24 hours
    setInterval(refreshData, 24 * 60 * 60 * 1000);
  </script>
</div> -->